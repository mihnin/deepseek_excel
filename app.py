import streamlit as st
import pandas as pd
import time
from datetime import datetime
from io import BytesIO, StringIO
import json
import os
from openai import OpenAI

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
st.set_page_config(
    page_title="DeepSeek Excel –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Pro", 
    page_icon="üìä", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–º–ø—Ç–æ–≤
def get_business_prompts():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á"""
    
    prompts = {
        "–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞": {
            "–ö—Ä–∞—Ç–∫–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –≤—ã–≤–æ–¥—ã:",
            "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è": "–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä–µ–º–æ–º 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã, —Ü–∏—Ñ—Ä—ã –∏ –≤—ã–≤–æ–¥—ã. –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–Ω –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:",
            "–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã": "–í—ã–¥–µ–ª–∏ 3-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            "–ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            "SWOT-–∞–Ω–∞–ª–∏–∑": "–ü—Ä–æ–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π SWOT-–∞–Ω–∞–ª–∏–∑ –ø–æ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —É–≥—Ä–æ–∑—ã):",
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫": "–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –¥–∞—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ. –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:",
        },
        
        "–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏": {
            "–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–∞": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è:",
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è": "–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–∂–∞–ª–æ–±–∞, –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å), –æ—Ü–µ–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π) –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ—Ç–¥–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            "–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π": "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã—è–≤–∏ –µ–≥–æ —è–≤–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã/—É—Å–ª—É–≥–∏ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:",
            "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": "–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —ç–º–ø–∞—Ç–∏—á–Ω—ã–º –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞:",
            "–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞": "–û—Ü–µ–Ω–∏ —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5. –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        },
        
        "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥": {
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞": "–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —É—Å–∏–ª—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:",
            "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ –∏ –≤—ã—è–≤–∏ –∏—Ö —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–∞–∫ –º—ã –º–æ–∂–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            "SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–π SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –í—ã–¥–µ–ª–∏ 3-5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã, –∏ –ø–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å –∏—Ö –æ—Ä–≥–∞–Ω–∏—á–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å:",
            "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é": "–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –æ–±—â–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: [–æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–∑ –¥–æ–ø. —Å—Ç–æ–ª–±—Ü–∞]. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö:",
        },
        
        "–§–∏–Ω–∞–Ω—Å—ã –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å": {
            "–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –ø–ª–∞–Ω–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:",
            "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç—á–µ—Ç—É": "–°–æ–∑–¥–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —ç—Ç–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –Ω–µ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π. –û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º:",
            "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö": "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª. –£—á—Ç–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:",
        },
        
        "HR –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏": {
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏": "–£–ª—É—á—à–∏ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ß—ë—Ç–∫–æ –æ–ø–∏—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã. –î–æ–±–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã:",
            "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ä–µ–∑—é–º–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–∏. –í—ã–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (–ø–æ–¥—Ö–æ–¥–∏—Ç/–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç/–≤–æ–∑–º–æ–∂–Ω–æ):",
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Ä–∞–±–æ—Ç–µ": "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –í—ã–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é:",
        },
        
        "–¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ": {
            "–û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã—è–≤–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:",
            "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ª–æ–≥–∏—á–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º:",
            "–ê–Ω–æ–º–∞–ª–∏–∏ –∏ –≤—ã–±—Ä–æ—Å—ã": "–ò—Å—Å–ª–µ–¥—É–π —Ç–∞–±–ª–∏—Ü—É –∏ –≤—ã—è–≤–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –≤—ã–±—Ä–æ—Å—ã –∏ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã. –û—Ü–µ–Ω–∏ –∏—Ö –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â–∏–µ –≤—ã–≤–æ–¥—ã:",
            "–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç": "–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏, –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏. –í–∫–ª—é—á–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        }
    }
    
    # –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    flat_prompts = {}
    for category, category_prompts in prompts.items():
        for name, prompt in category_prompts.items():
            flat_prompts[f"{category}: {name}"] = prompt
            
    return prompts, flat_prompts

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
def analyze_full_table(df, api_key, model, prompt, params, context_files=None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ü–µ–ª–∏–∫–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–æ–±—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ
    columns_info = {col: {
        "dtype": str(df[col].dtype), 
        "unique_values": len(df[col].unique()),
        "non_null": df[col].count(),
        "null_count": df[col].isna().sum(),
        "sample": df[col].dropna().head(3).tolist()
    } for col in df.columns}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
    numeric_stats = {}
    if df.select_dtypes(include=['number']).shape[1] > 0:
        numeric_stats = df.describe().to_dict()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_text = ""
    if context_files:
        context_text = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n"
        for file in context_files:
            try:
                content = file.getvalue().decode('utf-8')
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                if len(content) > 5000:
                    content = content[:5000] + "... [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
                context_text += f"--- –§–∞–π–ª: {file.name} ---\n{content}\n\n"
            except:
                context_text += f"--- –§–∞–π–ª: {file.name} --- [–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ]\n\n"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    messages = [
        {"role": "system", "content": "–í—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ."},
        {"role": "user", "content": f"""
        {prompt}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(df, 'name', '–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö')}
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}
        - –°—Ç–æ–ª–±—Ü—ã: {', '.join(df.columns.tolist())}
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö:
        {json.dumps(columns_info, ensure_ascii=False, indent=2)}
        
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º:
        {json.dumps(numeric_stats, ensure_ascii=False, indent=2)}
        
        –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã:
        {df.head(5).to_string()}
        
        {context_text}
        
        –ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """}
    ]
    
    # –ó–∞–ø—Ä–æ—Å –∫ API –º–æ–¥–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    max_retries = 3
    attempt = 0
    
    while attempt < max_retries:
        attempt += 1
        try:
            client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com")
            response = client.chat.completions.create(
                model=model,
                messages=messages,
                temperature=params["temperature"],
                max_tokens=params["max_tokens"],
                top_p=params["top_p"],
                frequency_penalty=params["frequency_penalty"],
                presence_penalty=params["presence_penalty"]
            )
            return response.choices[0].message.content, None
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt}: {str(e)}"
            if attempt == max_retries:
                return None, error
            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def process_context_files(files):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if not files:
        return []
    
    processed_files = []
    for file in files:
        file_bytes = BytesIO(file.read())
        file_bytes.name = file.name
        processed_files.append(file_bytes)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è
        file.seek(0)
    
    return processed_files

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
def manage_profiles():
    if "saved_profiles" not in st.session_state:
        st.session_state["saved_profiles"] = {}
    
    profiles = st.session_state["saved_profiles"]
    
    with st.expander("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            profile_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", key="new_profile_name")
            
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
                if profile_name:
                    current_settings = {
                        "model": st.session_state.get("model", "deepseek-chat"),
                        "temperature": st.session_state.get("temperature", 0.7),
                        "max_tokens": st.session_state.get("max_tokens", 300),
                        "top_p": st.session_state.get("top_p", 1.0),
                        "frequency_penalty": st.session_state.get("frequency_penalty", 0.0),
                        "presence_penalty": st.session_state.get("presence_penalty", 0.0),
                        "mode": st.session_state.get("mode", "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"),
                        "custom_prompt": st.session_state.get("custom_prompt", "")
                    }
                    profiles[profile_name] = current_settings
                    st.success(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        
        with col2:
            st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            profile_options = list(profiles.keys())
            if profile_options:
                selected_profile = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", profile_options, key="load_profile_select")
                
                if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"):
                    settings = profiles[selected_profile]
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
                    for key, value in settings.items():
                        st.session_state[key] = value
                    st.success(f"–ü—Ä–æ—Ñ–∏–ª—å '{selected_profile}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
            else:
                st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
def show_model_settings():
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ DeepSeek", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            model = st.text_input("–ú–æ–¥–µ–ª—å", value=st.session_state.get("model", "deepseek-chat"), key="model")
            temperature = st.slider("Temperature", 0.0, 2.0, st.session_state.get("temperature", 0.7), 0.1, key="temperature", 
                                  help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤. –ù–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–µ—Ç –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã, –≤—ã—Å–æ–∫–æ–µ - –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ.")
            max_tokens = st.slider("Max Tokens", 100, 4000, st.session_state.get("max_tokens", 300), 50, key="max_tokens",
                                 help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏. –£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        
        with col2:
            top_p = st.slider("Top P", 0.0, 1.0, st.session_state.get("top_p", 1.0), 0.1, key="top_p",
                            help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ. –ó–Ω–∞—á–µ–Ω–∏–µ 1.0 —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö.")
            frequency_penalty = st.slider("Frequency Penalty", 0.0, 2.0, st.session_state.get("frequency_penalty", 0.0), 0.1, key="frequency_penalty",
                                        help="–°–Ω–∏–∂–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ—Ä–∞–∑.")
            presence_penalty = st.slider("Presence Penalty", 0.0, 2.0, st.session_state.get("presence_penalty", 0.0), 0.1, key="presence_penalty",
                                       help="–°—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ –Ω–æ–≤—ã—Ö —Ç–µ–º–∞—Ö, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–∂–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "processing" not in st.session_state:
        st.session_state["processing"] = False
    if "logs" not in st.session_state:
        st.session_state["logs"] = []
    if "df" not in st.session_state:
        st.session_state["df"] = None
    if "result_df" not in st.session_state:
        st.session_state["result_df"] = None
    if "table_analysis_result" not in st.session_state:
        st.session_state["table_analysis_result"] = None
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.image("https://via.placeholder.com/100x100.png?text=DeepSeek", width=100)
        st.title("DeepSeek Excel Pro")
        
        # API –∫–ª—é—á
        api_key = st.text_input("DeepSeek API Key", type="password", key="api_key")
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode_options = ["–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]
        mode = st.radio("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞", mode_options, key="mode")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        manage_profiles()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        show_model_settings()
        
        st.divider()
        st.caption("¬© 2025 DeepSeek Excel Processor Pro")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    st.title("DeepSeek Excel Processor Pro")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã
    tab1, tab2, tab3 = st.tabs(["1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ========================
    with tab1:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        excel_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            type=["xlsx", "xls"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ Excel (.xlsx, .xls)"
        )
        
        if excel_file is not None:
            try:
                df = pd.read_excel(excel_file)
                st.session_state["df"] = df
                
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                        st.write(f"–°—Ç—Ä–æ–∫: {df.shape[0]}")
                        st.write(f"–°—Ç–æ–ª–±—Ü–æ–≤: {df.shape[1]}")
                        st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
                        st.write(df.dtypes)
                    
                    with col2:
                        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        st.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º:")
                        st.write(df.isna().sum())
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
                st.dataframe(df.head(10), use_container_width=True)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                warn_cols = []
                for col in df.columns:
                    if df[col].isna().sum() > df.shape[0] * 0.5:  # –ë–æ–ª–µ–µ 50% –ø—Ä–æ–ø—É—Å–∫–æ–≤
                        warn_cols.append(col)
                
                if warn_cols:
                    st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–ø—É—Å–∫–æ–≤: {', '.join(warn_cols)}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        context_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)", 
            type=["txt", "csv", "md", "json"], 
            accept_multiple_files=True
        )
        
        if context_files:
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context_files)}")
            for file in context_files:
                st.info(f"–§–∞–π–ª: {file.name} ({file.size} –±–∞–π—Ç)")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ
        if st.session_state["df"] is not None:
            st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–Ω–∞–ª–∏–∑–∞ ‚û°Ô∏è", on_click=lambda: st.query_params.update({"active_tab": "tab2"}))
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ========================
    with tab2:
        if st.session_state["df"] is None:
            st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ")
        else:
            df = st.session_state["df"]
            st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
            st.subheader("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
            structured_prompts, flat_prompts = get_business_prompts()
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
            prompt_source = st.radio(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∞",
                ["–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"],
                horizontal=True
            )
            
            if prompt_source == "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤":
                prompt_categories = list(structured_prompts.keys())
                selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤", prompt_categories)
                
                category_prompts = structured_prompts[selected_category]
                prompt_names = list(category_prompts.keys())
                selected_prompt_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç", prompt_names)
                
                selected_prompt = category_prompts[selected_prompt_name]
                st.session_state["custom_prompt"] = selected_prompt
                
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"):
                    st.text_area("–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞", selected_prompt, height=100, disabled=True)
            else:
                custom_prompt = st.text_area(
                    "–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                    value=st.session_state.get("custom_prompt", ""),
                    height=150,
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã..."
                )
                st.session_state["custom_prompt"] = custom_prompt
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if st.session_state["mode"] == "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                target_column = st.selectbox(
                    "–¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                    df.columns,
                    help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                
                additional_columns = st.multiselect(
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                    [col for col in df.columns if col != target_column],
                    default=[],
                    help="–î–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                )
                
                # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                st.subheader("–ü—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                example_data = df[[target_column] + additional_columns].head(2)
                st.dataframe(example_data, use_container_width=True)
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"):
                    example_row = df.iloc[0]
                    text_for_llm = str(example_row[target_column])
                    additional_context_str = ""
                    if additional_columns:
                        additional_context = [f"{col}: {example_row[col]}" for col in additional_columns]
                        additional_context_str = "\n".join(additional_context)
                    
                    full_prompt = f"""
                    {st.session_state["custom_prompt"]}
                    
                    –¢–µ–∫—Å—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {text_for_llm}
                    
                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
                    {additional_context_str}
                    """
                    st.text_area("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞", full_prompt, height=200, disabled=True)
            
            elif st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã":
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã")
                
                # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
                focus_columns = st.multiselect(
                    "–ö–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                    df.columns,
                    default=[],
                    help="–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ"
                )
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"):
                    full_table_prompt = f"""
                    {st.session_state["custom_prompt"]}
                    
                    –û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(focus_columns) if focus_columns else '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ'}
                    
                    –ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                    """
                    st.text_area("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞", full_table_prompt, height=200, disabled=True)
            
            else:  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                row_col1, row_col2 = st.columns(2)
                
                with row_col1:
                    st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**")
                    target_column = st.selectbox(
                        "–¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                        df.columns,
                        help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    )
                
                with row_col2:
                    st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**")
                    additional_columns = st.multiselect(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                        [col for col in df.columns if col != target_column],
                        default=[],
                        help="–î–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã**")
                focus_columns_table = st.multiselect(
                    "–ö–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã",
                    df.columns,
                    default=[target_column] if target_column else [],
                    help="–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏–º —Å—Ç–æ–ª–±—Ü–∞–º –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"
                )
                
                # –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                st.markdown("**–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**")
                execution_order = st.radio(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    ["–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∑–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã",
                     "–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
                    help="–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                )
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.subheader("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            start_col1, start_col2 = st.columns([3, 1])
            
            with start_col1:
                start_processing = st.button(
                    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö", 
                    type="primary",
                    disabled=st.session_state["processing"] or not api_key,
                    help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
                )
            
            with start_col2:
                estimated_time = "3-5 –º–∏–Ω" if st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã" else f"{df.shape[0] // 2 + 1}-{df.shape[0]} –º–∏–Ω" 
                st.info(f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
            
            if not api_key:
                st.warning("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API –∫–ª—é—á DeepSeek –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
            
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
            if start_processing:
                st.session_state["processing"] = True
                st.session_state["logs"].clear()
                
                if st.session_state["mode"] == "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                    st.session_state["table_analysis_result"] = None
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                    my_bar = st.progress(0, text=progress_text)
                    
                    try:
                        # –õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        df = st.session_state["df"]
                        result_col = f"{target_column}_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                        df[result_col] = ""
                        
                        client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ session_state
                        model_params = {
                            "temperature": st.session_state.get("temperature", 0.7),
                            "max_tokens": st.session_state.get("max_tokens", 300),
                            "top_p": st.session_state.get("top_p", 1.0),
                            "frequency_penalty": st.session_state.get("frequency_penalty", 0.0),
                            "presence_penalty": st.session_state.get("presence_penalty", 0.0)
                        }
                        
                        for i, row in df.iterrows():
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            progress = int((i + 1) / len(df) * 100)
                            my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
                            
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM
                            text_for_llm = str(row[target_column])
                            additional_context_str = ""
                            if additional_columns:
                                additional_context = [f"{col}: {row[col]}" for col in additional_columns]
                                additional_context_str = "\n".join(additional_context)
                            
                            messages = [
                                {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                                {
                                    "role": "user",
                                    "content": (
                                        f"{st.session_state['custom_prompt']}\n\n"
                                        f"–¢–µ–∫—Å—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {text_for_llm}\n\n"
                                        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{additional_context_str}"
                                    )
                                }
                            ]
                            
                            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                            row_log = {"row_index": i, "attempts": []}
                            max_retries = 3
                            attempt = 0
                            success = False
                            llm_answer = ""
                            
                            while not success and attempt < max_retries:
                                attempt += 1
                                attempt_log = {
                                    "attempt_number": attempt,
                                    "messages": messages,
                                    "raw_response": None,
                                    "parsed_answer": None,
                                    "error": None
                                }
                                
                                try:
                                    response = client.chat.completions.create(
                                        model=st.session_state.get("model", "deepseek-chat"),
                                        messages=messages,
                                        temperature=model_params["temperature"],
                                        max_tokens=model_params["max_tokens"],
                                        top_p=model_params["top_p"],
                                        frequency_penalty=model_params["frequency_penalty"],
                                        presence_penalty=model_params["presence_penalty"],
                                        stream=False
                                    )
                                    attempt_log["raw_response"] = str(response)
                                    
                                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
                                    llm_answer = response.choices[0].message.content.strip()
                                    attempt_log["parsed_answer"] = llm_answer
                                    success = True
                                
                                except Exception as e:
                                    attempt_log["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}"
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                                row_log["attempts"].append(attempt_log)
                                
                                if not success:
                                    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                            if success:
                                df.at[i, result_col] = llm_answer
                            else:
                                df.at[i, result_col] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
                            
                            st.session_state["logs"].append(row_log)
                            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                        st.session_state["result_df"] = df
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        st.query_params.update({"active_tab": "tab3"})
                    
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    
                    finally:
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        st.session_state["processing"] = False
                        
                elif st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã":
                    try:
                        # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                        df = st.session_state["df"]
                        
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ session_state
                            model_params = {
                                "temperature": st.session_state.get("temperature", 0.7),
                                "max_tokens": st.session_state.get("max_tokens", 1500),  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                "top_p": st.session_state.get("top_p", 1.0),
                                "frequency_penalty": st.session_state.get("frequency_penalty", 0.0),
                                "presence_penalty": st.session_state.get("presence_penalty", 0.0)
                            }
                            
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                            focus_text = ""
                            if 'focus_columns' in locals() and focus_columns:
                                focus_text = f"–û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(focus_columns)}"
                            
                            full_prompt = f"""
                            {st.session_state['custom_prompt']}
                            
                            {focus_text}
                            
                            –ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                            """
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
                            context_files_processed = process_context_files(context_files) if context_files else None
                            
                            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                            result, error = analyze_full_table(
                                df, 
                                api_key, 
                                st.session_state.get("model", "deepseek-chat"),
                                full_prompt,
                                model_params,
                                context_files_processed
                            )
                            
                            if error:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                st.session_state["table_analysis_result"] = result
                                st.session_state["result_df"] = df  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DataFrame
                                
                                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                                st.query_params.update({"active_tab": "tab3"})
                    
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    
                    finally:
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        st.session_state["processing"] = False
                
                else:  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    try:
                        # –õ–æ–≥–∏–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        df = st.session_state["df"]
                        result_col = f"{target_column}_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                        df[result_col] = ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ session_state
                        model_params = {
                            "temperature": st.session_state.get("temperature", 0.7),
                            "max_tokens": st.session_state.get("max_tokens", 300),
                            "top_p": st.session_state.get("top_p", 1.0),
                            "frequency_penalty": st.session_state.get("frequency_penalty", 0.0),
                            "presence_penalty": st.session_state.get("presence_penalty", 0.0)
                        }
                        
                        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ max_tokens)
                        table_model_params = model_params.copy()
                        table_model_params["max_tokens"] = 1500
                        
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
                        context_files_processed = process_context_files(context_files) if context_files else None
                        
                        if execution_order.startswith("–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"):
                            # 1. –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                focus_text = ""
                                if focus_columns_table:
                                    focus_text = f"–û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(focus_columns_table)}"
                                
                                full_prompt = f"""
                                {st.session_state['custom_prompt']}
                                
                                {focus_text}
                                
                                –ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                                """
                                
                                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                result, error = analyze_full_table(
                                    df, 
                                    api_key, 
                                    st.session_state.get("model", "deepseek-chat"),
                                    full_prompt,
                                    table_model_params,
                                    context_files_processed
                                )
                                
                                if error:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                                else:
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                    st.session_state["table_analysis_result"] = result
                            
                            # 2. –ó–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                            my_bar = st.progress(0, text=progress_text)
                            
                            client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                            table_analysis_context = st.session_state["table_analysis_result"]
                            
                            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                            if table_analysis_context and len(table_analysis_context) > 2000:
                                table_analysis_context = table_analysis_context[:2000] + "... [–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
                            
                            for i, row in df.iterrows():
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                                progress = int((i + 1) / len(df) * 100)
                                my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
                                
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                text_for_llm = str(row[target_column])
                                additional_context_str = ""
                                if additional_columns:
                                    additional_context = [f"{col}: {row[col]}" for col in additional_columns]
                                    additional_context_str = "\n".join(additional_context)
                                
                                messages = [
                                    {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                                    {
                                        "role": "user",
                                        "content": (
                                            f"{st.session_state['custom_prompt']}\n\n"
                                            f"–¢–µ–∫—Å—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {text_for_llm}\n\n"
                                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{additional_context_str}\n\n"
                                            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç):\n{table_analysis_context}"
                                        )
                                    }
                                ]
                                
                                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∂–∏–º–∞–º...
                                # (—á–∞—Å—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π API-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
                                
                                max_retries = 3
                                attempt = 0
                                success = False
                                llm_answer = ""
                                
                                while not success and attempt < max_retries:
                                    attempt += 1
                                    
                                    try:
                                        response = client.chat.completions.create(
                                            model=st.session_state.get("model", "deepseek-chat"),
                                            messages=messages,
                                            temperature=model_params["temperature"],
                                            max_tokens=model_params["max_tokens"],
                                            top_p=model_params["top_p"],
                                            frequency_penalty=model_params["frequency_penalty"],
                                            presence_penalty=model_params["presence_penalty"],
                                            stream=False
                                        )
                                        
                                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
                                        llm_answer = response.choices[0].message.content.strip()
                                        success = True
                                    
                                    except Exception as e:
                                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}"
                                        
                                        if attempt == max_retries:
                                            llm_answer = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}"
                                        else:
                                            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                                df.at[i, result_col] = llm_answer
                                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
                        
                        else:
                            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                            my_bar = st.progress(0, text=progress_text)
                            
                            client = OpenAI(api_key=api_key, base_url="https://api.deepseek.com")
                            
                            for i, row in df.iterrows():
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                                progress = int((i + 1) / len(df) * 100)
                                my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
                                
                                # –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∂–∏–º—É "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                                text_for_llm = str(row[target_column])
                                additional_context_str = ""
                                if additional_columns:
                                    additional_context = [f"{col}: {row[col]}" for col in additional_columns]
                                    additional_context_str = "\n".join(additional_context)
                                
                                messages = [
                                    {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                                    {
                                        "role": "user",
                                        "content": (
                                            f"{st.session_state['custom_prompt']}\n\n"
                                            f"–¢–µ–∫—Å—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {text_for_llm}\n\n"
                                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{additional_context_str}"
                                        )
                                    }
                                ]
                                
                                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∂–∏–º–∞–º...
                                max_retries = 3
                                attempt = 0
                                success = False
                                llm_answer = ""
                                
                                while not success and attempt < max_retries:
                                    attempt += 1
                                    
                                    try:
                                        response = client.chat.completions.create(
                                            model=st.session_state.get("model", "deepseek-chat"),
                                            messages=messages,
                                            temperature=model_params["temperature"],
                                            max_tokens=model_params["max_tokens"],
                                            top_p=model_params["top_p"],
                                            frequency_penalty=model_params["frequency_penalty"],
                                            presence_penalty=model_params["presence_penalty"],
                                            stream=False
                                        )
                                        
                                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
                                        llm_answer = response.choices[0].message.content.strip()
                                        success = True
                                    
                                    except Exception as e:
                                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}"
                                        
                                        if attempt == max_retries:
                                            llm_answer = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}"
                                        else:
                                            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                                df.at[i, result_col] = llm_answer
                                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
                            
                            # 2. –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                                focus_text = ""
                                if focus_columns_table:
                                    focus_text = f"–û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(focus_columns_table)}"
                                
                                full_prompt = f"""
                                {st.session_state['custom_prompt']}
                                
                                {focus_text}
                                
                                –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, 
                                –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ '{result_col}'. 
                                –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π.
                                
                                –ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç 
                                —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏, –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                                """
                                
                                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                result, error = analyze_full_table(
                                    df, 
                                    api_key, 
                                    st.session_state.get("model", "deepseek-chat"),
                                    full_prompt,
                                    table_model_params,
                                    context_files_processed
                                )
                                
                                if error:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                                else:
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                    st.session_state["table_analysis_result"] = result
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                        st.session_state["result_df"] = df
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        st.query_params.update({"active_tab": "tab3"})
                    
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    
                    finally:
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        st.session_state["processing"] = False
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ========================
    with tab3:
        if st.session_state["result_df"] is None and st.session_state["table_analysis_result"] is None:
            st.info("–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if st.session_state["result_df"] is not None:
                df_result = st.session_state["result_df"]
                result_columns = [col for col in df_result.columns if col.endswith("_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")]
                
                if result_columns:
                    st.subheader("–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    st.dataframe(df_result, use_container_width=True)
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine="openpyxl") as writer:
                        df_result.to_excel(writer, index=False)
                    processed_data = output.getvalue()
                    
                    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"processed_{timestamp}.xlsx"
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Excel",
                        data=processed_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            if st.session_state["table_analysis_result"] is not None:
                st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã")
                
                with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã", expanded=True):
                    table_result = st.session_state["table_analysis_result"]
                    st.markdown(table_result)
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"table_analysis_{timestamp}.md"
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã (MD)",
                        data=table_result.encode("utf-8"),
                        file_name=filename,
                        mime="text/markdown"
                    )
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if st.session_state["logs"]:
                st.subheader("–ñ—É—Ä–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
                    for log_entry in st.session_state["logs"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ª–æ–≥–æ–≤
                        st.write(f"–°—Ç—Ä–æ–∫–∞ {log_entry['row_index']}")
                        for att in log_entry["attempts"]:
                            st.write(f"–ü–æ–ø—ã—Ç–∫–∞ {att['attempt_number']}")
                            if att.get("error"):
                                st.write(f"–û—à–∏–±–∫–∞: {att['error']}")
                            if att.get("parsed_answer"):
                                st.write(f"–û—Ç–≤–µ—Ç: {att['parsed_answer'][:100]}...")
                        st.divider()
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                log_lines = []
                for row_log in st.session_state["logs"]:
                    log_lines.append(f"=== –°—Ç—Ä–æ–∫–∞: {row_log['row_index']} ===")
                    for att in row_log["attempts"]:
                        log_lines.append(f"–ü–æ–ø—ã—Ç–∫–∞ {att['attempt_number']}")
                        if "messages" in att:
                            log_lines.append(f"Messages: {att['messages']}")
                        if "raw_response" in att:
                            log_lines.append(f"Raw response: {att['raw_response']}")
                        if "parsed_answer" in att:
                            log_lines.append(f"Parsed answer: {att['parsed_answer']}")
                        if "error" in att:
                            log_lines.append(f"Error: {att['error']}")
                    log_lines.append("")
                
                full_text = "\n".join(log_lines)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ (TXT)",
                    data=full_text.encode("utf-8"),
                    file_name=f"logs_{timestamp}.txt",
                    mime="text/plain"
                )

if __name__ == "__main__":
    main()