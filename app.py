import streamlit as st
import pandas as pd
import time
from datetime import datetime
import json
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(
    page_title="DeepSeek Excel Processor Pro", 
    page_icon="üìä", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from modules.excel_handler import ExcelHandler
from modules.file_utils import FileProcessor
from modules.prompt_library import get_business_prompts, customize_prompt
from ui.llm_settings_view import llm_settings_ui
from utils.profile_manager import ProfileManager
from utils.config_manager import ConfigManager

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–∞
@st.cache_data
def cached_load_excel(file):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞"""
    excel_handler = ExcelHandler()
    return excel_handler.load_excel(file)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ DataFrame
@st.cache_data
def cached_analyze_dataframe(df):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ DataFrame"""
    excel_handler = ExcelHandler()
    return excel_handler.analyze_dataframe(df)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
profile_manager = ProfileManager()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
def get_unified_llm_provider(settings):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
    
    Args:
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        
    Returns:
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    """
    try:
        from modules.unified_llm import UnifiedLLMProvider
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
        if settings["provider_type"] == "cloud" and not settings.get("api_key"):
            st.error("API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        base_url = settings.get("cloud_base_url", "https://api.deepseek.com")
        if not base_url.startswith("https://api.deepseek.com"):
            st.warning(f"–ë–∞–∑–æ–≤—ã–π URL '{base_url}' –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 'https://api.deepseek.com'")
            
        return UnifiedLLMProvider({
            "provider_type": settings["provider_type"],
            "cloud_api_key": settings["api_key"],
            "cloud_base_url": base_url,
            "local_provider": settings["local_provider"],
            "local_base_url": settings["local_base_url"]
        })
    except ImportError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
def analyze_full_table(df, llm_provider, prompt, settings, context_files=None):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ü–µ–ª–∏–∫–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–æ–±—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    Args:
        df: DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM
        prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        context_files: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
    Returns:
        tuple: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ—à–∏–±–∫–∞)
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    stats = cached_analyze_dataframe(df)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    file_processor = FileProcessor()
    context_text = file_processor.prepare_context_for_analysis(context_files) if context_files else ""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    messages = [
        {"role": "system", "content": "–í—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ."},
        {"role": "user", "content": f"""
        {prompt}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(df, 'name', '–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö')}
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}
        - –°—Ç–æ–ª–±—Ü—ã: {', '.join(df.columns.tolist())}
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö:
        {json.dumps(stats["dtypes"], ensure_ascii=False, indent=2)}
        
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º:
        {json.dumps(stats["missing_percentage"], ensure_ascii=False, indent=2)}
        
        –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã:
        {df.head(5).to_string()}
        
        {context_text}
        
        –ü—Ä–æ–≤–µ–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤—ã–≤–æ–¥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """}
    ]
    
    # –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É LLM
    model = settings["model"]
    params = {
        "temperature": settings["temperature"],
        "max_tokens": settings["max_tokens"],
        "top_p": settings["top_p"],
        "frequency_penalty": settings["frequency_penalty"],
        "presence_penalty": settings["presence_penalty"]
    }
    
    return llm_provider.chat_completion(
        messages=messages,
        model=model,
        **params
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_manager = ConfigManager()
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    app_title = config_manager.get("app.title", "DeepSeek Excel Processor Pro")
    app_icon = config_manager.get("app.icon", "üìä")
    sidebar_state = config_manager.get("app.sidebar_state", "expanded")
    layout = config_manager.get("app.layout", "wide")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "processing" not in st.session_state:
        st.session_state["processing"] = False
    if "logs" not in st.session_state:
        st.session_state["logs"] = []
    if "df" not in st.session_state:
        st.session_state["df"] = None
    if "result_df" not in st.session_state:
        st.session_state["result_df"] = None
    if "table_analysis_result" not in st.session_state:
        st.session_state["table_analysis_result"] = None
    if "config_manager" not in st.session_state:
        st.session_state["config_manager"] = config_manager
    else:
        config_manager = st.session_state["config_manager"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏–∑ URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
    query_params = st.query_params
    active_tab = query_params.get("active_tab", ["tab1"])[0]
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        logo_url = config_manager.get("app.logo_url", "https://via.placeholder.com/100x100.png?text=DeepSeek")
        st.image(logo_url, width=100)
        st.title(app_title)
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        mode_options = config_manager.get("app.modes", ["–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
        mode = st.radio("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞", mode_options, key="mode")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        profile_manager.render_ui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        llm_settings = llm_settings_ui()
        
        st.divider()
        copyright_text = config_manager.get("app.copyright", "¬© 2025 DeepSeek Excel Processor Pro")
        st.caption(copyright_text)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    st.title(app_title)
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    tab_index = {"tab1": 0, "tab2": 1, "tab3": 2}.get(active_tab, 0)
    tab1, tab2, tab3 = st.tabs(["1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

    # Set the active tab based on the query parameter
    if tab_index == 1:
        st.query_params["active_tab"] = "tab2"
        st.rerun()
    elif tab_index == 2:
        st.query_params["active_tab"] = "tab3"
        st.rerun()
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ========================
    with tab1:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        excel_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            type=["xlsx", "xls"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ Excel (.xlsx, .xls)"
        )
        
        if excel_file is not None:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑
                df = cached_load_excel(excel_file)
                st.session_state["df"] = df
                
                # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ DataFrame
                stats = cached_analyze_dataframe(df)
                
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: {stats['rows']} —Å—Ç—Ä–æ–∫ √ó {stats['columns']} —Å—Ç–æ–ª–±—Ü–æ–≤")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
                        st.write(f"–°—Ç—Ä–æ–∫: {stats['rows']}")
                        st.write(f"–°—Ç–æ–ª–±—Ü–æ–≤: {stats['columns']}")
                        st.write("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
                        st.write(pd.Series(stats["dtypes"]))
                    
                    with col2:
                        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        st.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º:")
                        st.write(pd.Series(stats["missing_values"]))
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
                st.dataframe(df.head(10), use_container_width=True)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                if stats["has_issues"]:
                    for issue in stats["issues"]:
                        st.warning(issue)
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        context_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)", 
            type=["txt", "csv", "md", "json"], 
            accept_multiple_files=True
        )
        
        if context_files:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FileProcessor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            file_processor = FileProcessor()
            file_summary = file_processor.summarize_files(context_files)
            
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {file_summary['count']}")
            for file_info in file_summary["files"]:
                st.info(f"–§–∞–π–ª: {file_info['name']} ({file_info['size']} –±–∞–π—Ç) - –¢–∏–ø: {file_info['type']}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ
        if st.session_state["df"] is not None:
            if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–Ω–∞–ª–∏–∑–∞ ‚û°Ô∏è"):
                st.query_params["active_tab"] = "tab2"
                st.rerun()
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ========================
    with tab2:
        if st.session_state["df"] is None:
            st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ")
        else:
            df = st.session_state["df"]
            st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
            st.subheader("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
            structured_prompts, flat_prompts = get_business_prompts()
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
            prompt_source = st.radio(
                "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∞",
                ["–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"],
                horizontal=True
            )
            
            if prompt_source == "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤":
                prompt_categories = list(structured_prompts.keys())
                selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤", prompt_categories)
                
                category_prompts = structured_prompts[selected_category]
                prompt_names = list(category_prompts.keys())
                selected_prompt_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç", prompt_names)
                
                selected_prompt = category_prompts[selected_prompt_name]
                st.session_state["custom_prompt"] = selected_prompt
                
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"):
                    st.text_area("–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞", selected_prompt, height=100, disabled=True)
            else:
                custom_prompt = st.text_area(
                    "–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                    value=st.session_state.get("custom_prompt", ""),
                    height=150,
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã..."
                )
                st.session_state["custom_prompt"] = custom_prompt
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if st.session_state["mode"] == "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExcelHandler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
                excel_handler = ExcelHandler()
                
                # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                suggested_target_columns = excel_handler.suggest_target_columns(df)
                target_column = st.selectbox(
                    "–¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                    df.columns,
                    index=int(df.columns.get_indexer([suggested_target_columns[0]])[0]) if suggested_target_columns else 0,
                    help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                suggested_additional_columns = excel_handler.suggest_additional_columns(df, target_column)
                additional_columns = st.multiselect(
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                    [col for col in df.columns if col != target_column],
                    default=suggested_additional_columns[:2] if len(suggested_additional_columns) >= 2 else suggested_additional_columns,
                    help="–î–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                )
                
                # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                st.subheader("–ü—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                example_data = df[[target_column] + additional_columns].head(2)
                st.dataframe(example_data, use_container_width=True)
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"):
                    example_row = df.iloc[0]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
                    context = {
                        "target_column": target_column,
                        "additional_columns": additional_columns,
                        "row_data": {col: example_row[col] for col in [target_column] + additional_columns}
                    }
                    customized_prompt = customize_prompt(st.session_state["custom_prompt"], context)
                    st.text_area("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞", customized_prompt, height=200, disabled=True)
            
            elif st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã":
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã")
                
                # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
                focus_columns = st.multiselect(
                    "–ö–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                    df.columns,
                    default=[],
                    help="–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ"
                )
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
                    context = {
                        "focus_columns": focus_columns
                    }
                    customized_prompt = customize_prompt(st.session_state["custom_prompt"], context)
                    st.text_area("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞", customized_prompt, height=200, disabled=True)
            
            else:  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                row_col1, row_col2 = st.columns(2)
                
                with row_col1:
                    st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExcelHandler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
                    excel_handler = ExcelHandler()
                    suggested_target_columns = excel_handler.suggest_target_columns(df)
                    
                    target_column = st.selectbox(
                        "–¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                        df.columns,
                        index=int(df.columns.get_indexer([suggested_target_columns[0]])[0]) if suggested_target_columns else 0,
                        help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    )
                
                with row_col2:
                    st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**")
                    suggested_additional_columns = excel_handler.suggest_additional_columns(df, target_column)
                    
                    additional_columns = st.multiselect(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                        [col for col in df.columns if col != target_column],
                        default=suggested_additional_columns[:2] if len(suggested_additional_columns) >= 2 else suggested_additional_columns,
                        help="–î–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã**")
                focus_columns_table = st.multiselect(
                    "–ö–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã",
                    df.columns,
                    default=[target_column] if target_column else [],
                    help="–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏–º —Å—Ç–æ–ª–±—Ü–∞–º –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"
                )
                
                # –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                st.markdown("**–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**")
                execution_order = st.radio(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    ["–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∑–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã",
                     "–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
                    help="–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                )
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.subheader("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            start_col1, start_col2 = st.columns([3, 1])
            
            with start_col1:
                start_processing = st.button(
                    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö", 
                    type="primary",
                    disabled=st.session_state["processing"] or not llm_settings["api_key"] 
                           if llm_settings["provider_type"] == "cloud" else st.session_state["processing"],
                    help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
                )
            
            with start_col2:
                estimated_time = "3-5 –º–∏–Ω" if st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã" else f"{df.shape[0] // 2 + 1}-{df.shape[0]} –º–∏–Ω" 
                st.info(f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
            
            if llm_settings["provider_type"] == "cloud" and not llm_settings["api_key"]:
                st.warning("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–±–ª–∞—á–Ω–æ–π –º–æ–¥–µ–ª—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
            
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
            if start_processing:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM
                llm_provider = get_unified_llm_provider(llm_settings)
                
                if llm_provider is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    if not llm_provider.is_available():
                        if llm_settings["provider_type"] == "cloud":
                            st.error("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.")
                        else:
                            st.error(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ {llm_settings['local_provider']}.")
                    else:
                        st.session_state["processing"] = True
                        st.session_state["logs"] = []
                        
                        if st.session_state["mode"] == "–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
                            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            process_row_by_row(df, llm_provider, llm_settings, target_column, additional_columns, context_files)
                            
                        elif st.session_state["mode"] == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã":
                            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                            process_full_table(df, llm_provider, llm_settings, focus_columns, context_files)
                            
                        else:  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            process_combined_analysis(df, llm_provider, llm_settings, target_column, additional_columns, focus_columns_table, execution_order, context_files)
    
    # ======================== –í–∫–ª–∞–¥–∫–∞ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ========================
    with tab3:
        if st.session_state["result_df"] is None and st.session_state["table_analysis_result"] is None:
            st.info("–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if st.session_state["result_df"] is not None:
                df_result = st.session_state["result_df"]
                result_columns = [col for col in df_result.columns if col.endswith("_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")]
                
                if result_columns:
                    st.subheader("–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    st.dataframe(df_result, use_container_width=True)
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    excel_handler = ExcelHandler()
                    output = excel_handler.save_to_excel(df_result)
                    
                    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"processed_{timestamp}.xlsx"
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Excel",
                        data=output,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
            if st.session_state["table_analysis_result"] is not None:
                st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã")
                
                with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã", expanded=True):
                    table_result = st.session_state["table_analysis_result"]
                    st.markdown(table_result)
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"table_analysis_{timestamp}.md"
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã (MD)",
                        data=table_result.encode("utf-8"),
                        file_name=filename,
                        mime="text/markdown"
                    )
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if st.session_state["logs"]:
                st.subheader("–ñ—É—Ä–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
                    for log_entry in st.session_state["logs"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ª–æ–≥–æ–≤
                        st.write(f"–°—Ç—Ä–æ–∫–∞ {log_entry['row_index']}")
                        for att in log_entry["attempts"]:
                            st.write(f"–ü–æ–ø—ã—Ç–∫–∞ {att['attempt_number']}")
                            if att.get("error"):
                                st.write(f"–û—à–∏–±–∫–∞: {att['error']}")
                            if att.get("parsed_answer"):
                                st.write(f"–û—Ç–≤–µ—Ç: {att['parsed_answer'][:100]}...")
                        st.divider()
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                log_lines = []
                for row_log in st.session_state["logs"]:
                    log_lines.append(f"=== –°—Ç—Ä–æ–∫–∞: {row_log['row_index']} ===")
                    for att in row_log["attempts"]:
                        log_lines.append(f"–ü–æ–ø—ã—Ç–∫–∞ {att['attempt_number']}")
                        if "messages" in att:
                            log_lines.append(f"Messages: {att['messages']}")
                        if "raw_response" in att:
                            log_lines.append(f"Raw response: {att['raw_response']}")
                        if "parsed_answer" in att:
                            log_lines.append(f"Parsed answer: {att['parsed_answer']}")
                        if "error" in att:
                            log_lines.append(f"Error: {att['error']}")
                    log_lines.append("")
                
                full_text = "\n".join(log_lines)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ (TXT)",
                    data=full_text.encode("utf-8"),
                    file_name=f"logs_{timestamp}.txt",
                    mime="text/plain"
                )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_row_by_row(df, llm_provider, llm_settings, target_column, additional_columns, context_files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"""
    st.session_state["table_analysis_result"] = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    my_bar = st.progress(0, text=progress_text)
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_df = df.copy()
        result_col = f"{target_column}_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
        result_df[result_col] = ""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        model = llm_settings["model"]
        model_params = {
            "temperature": llm_settings["temperature"],
            "max_tokens": llm_settings["max_tokens"],
            "top_p": llm_settings["top_p"],
            "frequency_penalty": llm_settings["frequency_penalty"],
            "presence_penalty": llm_settings["presence_penalty"]
        }
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        file_processor = FileProcessor()
        context_files_processed = file_processor.process_context_files(context_files) if context_files else None
        context_text = file_processor.prepare_context_for_analysis(context_files_processed) if context_files_processed else ""
        
        for i, row in df.iterrows():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress = int((i + 1) / len(df) * 100)
            my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM
            text_for_llm = str(row[target_column])
            additional_context_str = ""
            if additional_columns:
                additional_context = [f"{col}: {row[col]}" for col in additional_columns]
                additional_context_str = "\n".join(additional_context)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è prompt_library
            context = {
                "target_column": target_column,
                "additional_columns": additional_columns,
                "row_data": {col: row[col] for col in [target_column] + additional_columns}
            }
            prompt = customize_prompt(st.session_state["custom_prompt"], context)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
            messages = [
                {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {
                    "role": "user",
                    "content": (
                        f"{prompt}\n\n"
                        f"{context_text}"
                    )
                }
            ]
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            row_log = {"row_index": i, "attempts": []}
            max_retries = 3
            attempt = 0
            success = False
            llm_answer = ""
            
            while not success and attempt < max_retries:
                attempt += 1
                attempt_log = {
                    "attempt_number": attempt,
                    "messages": messages,
                    "raw_response": None,
                    "parsed_answer": None,
                    "error": None
                }
                
                try:
                    # –ó–∞–ø—Ä–æ—Å –∫ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
                    response, error = llm_provider.chat_completion(
                        messages=messages,
                        model=model,
                        **model_params
                    )
                    
                    if error:
                        attempt_log["error"] = error
                    else:
                        attempt_log["raw_response"] = "Success"
                        attempt_log["parsed_answer"] = response
                        llm_answer = response
                        success = True
                
                except Exception as e:
                    attempt_log["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ LLM: {e}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                row_log["attempts"].append(attempt_log)
                
                if not success:
                    time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
            if success:
                result_df.at[i, result_col] = llm_answer
            else:
                result_df.at[i, result_col] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            
            st.session_state["logs"].append(row_log)
            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
        st.session_state["result_df"] = result_df
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        st.query_params["active_tab"] = "tab3"
        st.rerun()
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
    
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.session_state["processing"] = False

def process_full_table(df, llm_provider, llm_settings, focus_columns, context_files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–ª–∏–∫–æ–º"""
    try:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
            table_model_params = llm_settings.copy()
            table_model_params["max_tokens"] = max(1500, llm_settings["max_tokens"])  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
            focus_text = ""
            if focus_columns:
                focus_text = f"–û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(focus_columns)}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
            context = {
                "focus_columns": focus_columns
            }
            full_prompt = customize_prompt(st.session_state["custom_prompt"], context)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            file_processor = FileProcessor()
            context_files_processed = file_processor.process_context_files(context_files) if context_files else None
            
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
            result, error = analyze_full_table(
                df, 
                llm_provider, 
                full_prompt,
                table_model_params,
                context_files_processed
            )
            
            if error:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                st.session_state["table_analysis_result"] = result
                st.session_state["result_df"] = df  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π DataFrame
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                st.query_params["active_tab"] = "tab3"
                st.rerun()
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)
    
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.session_state["processing"] = False

def process_combined_analysis(df, llm_provider, llm_settings, target_column, additional_columns, focus_columns_table, execution_order, context_files):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_df = df.copy()
        result_col = f"{target_column}_–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
        result_df[result_col] = ""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        model_params = {
            "temperature": llm_settings["temperature"],
            "max_tokens": llm_settings["max_tokens"],
            "top_p": llm_settings["top_p"],
            "frequency_penalty": llm_settings["frequency_penalty"],
            "presence_penalty": llm_settings["presence_penalty"]
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ max_tokens)
        table_model_params = model_params.copy()
        table_model_params["max_tokens"] = max(1500, model_params["max_tokens"])
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        file_processor = FileProcessor()
        context_files_processed = file_processor.process_context_files(context_files) if context_files else None
        
        if execution_order.startswith("–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"):
            # 1. –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                context = {
                    "focus_columns": focus_columns_table
                }
                full_prompt = customize_prompt(st.session_state["custom_prompt"], context)
                
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                result, error = analyze_full_table(
                    df, 
                    llm_provider, 
                    full_prompt,
                    table_model_params,
                    context_files_processed
                )
                
                if error:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                    st.session_state["table_analysis_result"] = result
            
            # 2. –ó–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            my_bar = st.progress(0, text=progress_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            table_analysis_context = st.session_state["table_analysis_result"]
            
            # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if table_analysis_context and len(table_analysis_context) > 2000:
                table_analysis_context = table_analysis_context[:2000] + "... [–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
            
            for i, row in df.iterrows():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress = int((i + 1) / len(df) * 100)
                my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                context = {
                    "target_column": target_column,
                    "additional_columns": additional_columns,
                    "row_data": {col: row[col] for col in [target_column] + additional_columns}
                }
                
                prompt = customize_prompt(st.session_state["custom_prompt"], context)
                
                messages = [
                    {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                    {
                        "role": "user",
                        "content": (
                            f"{prompt}\n\n"
                            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç):\n{table_analysis_context}"
                        )
                    }
                ]
                
                # –ó–∞–ø—Ä–æ—Å –∫ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
                response, error = llm_provider.chat_completion(
                    messages=messages,
                    model=llm_settings["model"],
                    **model_params
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                if error:
                    result_df.at[i, result_col] = f"–û—à–∏–±–∫–∞: {error}"
                else:
                    result_df.at[i, result_col] = response
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
        
        else:
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            progress_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            my_bar = st.progress(0, text=progress_text)
            
            for i, row in df.iterrows():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress = int((i + 1) / len(df) * 100)
                my_bar.progress(progress, text=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ {i+1} –∏–∑ {len(df)}...")
                
                # –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                context = {
                    "target_column": target_column,
                    "additional_columns": additional_columns,
                    "row_data": {col: row[col] for col in [target_column] + additional_columns}
                }
                
                prompt = customize_prompt(st.session_state["custom_prompt"], context)
                
                messages = [
                    {"role": "system", "content": "–í—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
                
                # –ó–∞–ø—Ä–æ—Å –∫ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
                response, error = llm_provider.chat_completion(
                    messages=messages,
                    model=llm_settings["model"],
                    **model_params
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
                if error:
                    result_df.at[i, result_col] = f"–û—à–∏–±–∫–∞: {error}"
                else:
                    result_df.at[i, result_col] = response
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–æ–∫
            
            # 2. –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                context = {
                    "focus_columns": focus_columns_table
                }
                
                prompt = customize_prompt(st.session_state["custom_prompt"], context)
                
                full_prompt = f"""
                {prompt}
                
                –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, 
                –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ '{result_col}'. 
                –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π.
                
                –ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç 
                —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏, –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                """
                
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                result, error = analyze_full_table(
                    result_df,  # –ü–µ—Ä–µ–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    llm_provider, 
                    full_prompt,
                    table_model_params,
                    context_files_processed
                )
                
                if error:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {error}")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                    st.session_state["table_analysis_result"] = result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
        st.session_state["result_df"] = result_df
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∫–ª–∞–¥–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        st.query_params["active_tab"] = "tab3"
        st.rerun()
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
    
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.session_state["processing"] = False

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()